REPORT 1

The program file can be found in /~src sub folder in the submission folder. The file is named “main.py” and the programming language used is Python. To run this code, simply run the source code and the program will be up and running. Necessary imports in the code are as follows: import os, import nltk, import string, import re, import collection. While running the code, the code will create as many as 4 separate .txt files while running in the same directory. It is assumed in the training data file and test data file are located in the same folder as the source code is put in. 
The name of the training data file is: “1580506710_9392152_train_file.dat”
The name of the test data file is: “1580506710_9597683_test.dat”
These files are only opened and read for data.

	First of all, when the code is run, it will import necessary libraries for implementing and further use. Then the code will open the training data file; after the training data file is open, the code will get positive 
  s and negative reviews which are separated by “+1” and “-1” at the beginning of each review. The way I approached this problem of separating is that I implemented the code to put positive and negative reviews in a separate list to be distinguished. Then the data for positive and negative reviews is cleaned. Repetition of words is removed, stop words are cleaned, the string is then lemmatized and then it is joined back. All this preprocessing is done via a method preprocessor(doc). Then the processed positive and negative reviews are written in a separate text files for the reviews that will be the bag of words for the reviews. The number of neighbors started out as 3 at first then I increased the number to 5. Then the test file is opened and each review is cross validated against the knn, each for positive and negative knn: knnPos() and knnNeg() where the loop is run and a score is assigned for each existing word in the list of positive and negative review. This runs for k neighbors. Then the score is returned for each word in the review and a score for the review is declared. The code then puts “+1” for positive review and “-1” for a negative review in a list. After all the reviews are being run in knn, the list is written in the final format file. Lastly, the supporting text files are removed.
	
Due to the number of dimensions being very high, 18506 reviews for the test data file, the code takes quite a long time to finish running. During the early phase of the code, there were many bugs in the code and due to the time consumption of running time, it was hard to fix the code. So, I started testing the code in bits and pieces and then join those bits and pieces. The overall running time for the code is around 3.5 hours as of now. In the beginning it took over 6 hours to finish due to the code not being cleaning the training data properly. Fixing the cleaning and preprocessing did actually help the running time of the code. Finally, if the time permitted I would’ve definitely tried to minimize the run time and also make the code more accurate with regards to the test data.
